name: Network Template Update Trigger

on:
  push:
    branches: [ main, master ]
    paths:
      - 'templates/**/*.yaml'
      - 'templates/**/*.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'templates/**/*.yaml'
      - 'templates/**/*.yml'

jobs:
  notify-template-changes:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Get current and previous commit
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml requests
    
    - name: Get changed template files
      id: changed-files
      run: |
        echo "Detecting changed template files..."
        
        # Get list of changed files in templates directory
        if [ "${{ github.event_name }}" = "push" ]; then
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} -- 'templates/*.yaml' 'templates/*.yml' || echo "")
        else
          # For PR, compare with base branch
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }} -- 'templates/*.yaml' 'templates/*.yml' || echo "")
        fi
        
        echo "Changed files: $CHANGED_FILES"
        
        # Convert to JSON array format
        if [ -n "$CHANGED_FILES" ]; then
          CHANGED_JSON=$(echo "$CHANGED_FILES" | python3 -c 'import sys, json; files = [line.strip() for line in sys.stdin if line.strip()]; print(json.dumps(files))')
        else
          CHANGED_JSON='[]'
        fi
        
        echo "changed_files=$CHANGED_JSON" >> $GITHUB_OUTPUT
        echo "has_changes=$([ "$CHANGED_JSON" != "[]" ] && echo true || echo false)" >> $GITHUB_OUTPUT
    
    - name: Extract configuration and send notifications
      if: steps.changed-files.outputs.has_changes == 'true'
      run: |
        python3 << 'EOF'
        import yaml
        import json
        import requests
        import os
        import sys
        from datetime import datetime
        
        def load_yaml_config(filename):
            try:
                with open(filename, 'r') as f:
                    return yaml.safe_load(f)
            except Exception as e:
                print(f"Error loading {filename}: {e}")
                return None
        
        def extract_template_metadata(filepath):
            """Extract metadata from template filename"""
            filename = os.path.basename(filepath)
            parts = filename.replace('.yaml', '').replace('.yml', '').split('-')
            
            if len(parts) >= 3:
                return {
                    "device_type": parts[0],
                    "environment": parts[1],
                    "version": '-'.join(parts[2:])
                }
            return {"device_type": "unknown", "environment": "unknown", "version": "unknown"}
        
        def send_notification(api_config, payload):
            """Send notification to API endpoint"""
            try:
                base_url = api_config.get('base_url', 'http://127.0.0.1:5001')
                endpoint = api_config.get('endpoint', '/api/v1/network-templates/updated')
                
                # Handle different URL formats
                if 'endpoints' in api_config:
                    endpoint = api_config['endpoints'].get('template_updated', endpoint)
                
                url = f"{base_url.rstrip('/')}{endpoint}"
                
                headers = {
                    'Content-Type': 'application/json',
                    'User-Agent': 'network-templates-github-action/1.0',
                    'X-Source': 'github-actions'
                }
                
                # Add authentication if configured
                if 'authentication' in api_config:
                    auth = api_config['authentication']
                    if auth.get('type') == 'bearer_token' and 'token' in auth:
                        headers['Authorization'] = f"Bearer {auth['token']}"
                
                print(f"Sending notification to: {url}")
                print(f"Payload: {json.dumps(payload, indent=2)}")
                
                response = requests.post(url, json=payload, headers=headers, timeout=30)
                response.raise_for_status()
                
                print(f"✅ Successfully notified {url}")
                print(f"Response: {response.status_code} - {response.text}")
                return True
                
            except requests.exceptions.RequestException as e:
                print(f"❌ Failed to notify {url}: {e}")
                return False
        
        # Load configurations
        api_config = load_yaml_config('api-config.yaml')
        deployment_config = load_yaml_config('deployment-config.yaml')
        
        if not api_config and not deployment_config:
            print("❌ No valid configuration files found")
            sys.exit(1)
        
        # Get changed files from GitHub Actions output
        changed_files_json = '${{ steps.changed-files.outputs.changed_files }}'
        changed_files = json.loads(changed_files_json)
        
        print(f"Processing {len(changed_files)} changed template files...")
        
        # Prepare payload
        processed_files = []
        for filepath in changed_files:
            metadata = extract_template_metadata(filepath)
            processed_files.append({
                "path": filepath,
                "device_type": metadata["device_type"],
                "environment": metadata["environment"],
                "version": metadata["version"]
            })
        
        payload = {
            "event": "template_updated",
            "repository": "${{ github.repository }}",
            "commit_sha": "${{ github.sha }}",
            "commit_message": "${{ github.event.head_commit.message }}",
            "author": "${{ github.event.head_commit.author.name }}",
            "timestamp": datetime.utcnow().isoformat() + "Z",
            "changed_files": processed_files,
            "workflow_run_id": "${{ github.run_id }}",
            "workflow_run_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        }
        
        success_count = 0
        
        # Send notification using api-config.yaml if available
        if api_config and 'api' in api_config:
            if send_notification(api_config['api'], payload):
                success_count += 1
        
        # Send notification using deployment-config.yaml if available
        if deployment_config and 'api' in deployment_config:
            if send_notification(deployment_config['api'], payload):
                success_count += 1
        
        if success_count == 0:
            print("❌ All notifications failed")
            sys.exit(1)
        else:
            print(f"✅ Successfully sent {success_count} notification(s)")
        
        EOF
    
    - name: Summary
      if: always()
      run: |
        echo "## Template Update Notification Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Changed Files**: ${{ steps.changed-files.outputs.changed_files }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Has Changes**: ${{ steps.changed-files.outputs.has_changes }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
